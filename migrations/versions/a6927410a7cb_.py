"""

Revision ID: a6927410a7cb
Revises: 
Create Date: 2023-09-02 19:07:45.125935

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a6927410a7cb'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('color', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_groups_uuid'), 'groups', ['uuid'], unique=True)
    op.create_table('system_notifications',
    sa.Column('type', postgresql.ENUM('success', 'info', 'warning', 'error', name='notification_type'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_system_notifications_uuid'), 'system_notifications', ['uuid'], unique=True)
    op.create_table('users',
    sa.Column('role', postgresql.ENUM('student', 'teacher', 'admin', name='user_role'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('learningClass', sa.Integer(), nullable=False),
    sa.Column('groupId', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('shtpMaintainer', sa.Boolean(), nullable=True),
    sa.Column('nickName', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('firstName', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('lastName', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('aboutText', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('patronymicName', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('avatarPath', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('telegram', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('github', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('stepik', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('kaggle', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('website', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('techStack', sqlmodel.sql.sqltypes.AutoString(length=800), nullable=True),
    sa.ForeignKeyConstraint(['groupId'], ['groups.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('github'),
    sa.UniqueConstraint('kaggle'),
    sa.UniqueConstraint('nickName'),
    sa.UniqueConstraint('stepik'),
    sa.UniqueConstraint('telegram'),
    sa.UniqueConstraint('website')
    )
    op.create_index(op.f('ix_users_uuid'), 'users', ['uuid'], unique=True)
    op.create_table('achievements',
    sa.Column('toUser', postgresql.UUID(as_uuid=1), nullable=True),
    sa.Column('role', postgresql.ENUM('olimpiad', 'event', name='eventType'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('acceptedBy', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('attachmentName', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=5000), nullable=False),
    sa.Column('points', sa.Integer(), nullable=True),
    sa.Column('acceptedAt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['toUser'], ['users.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_achievements_uuid'), 'achievements', ['uuid'], unique=True)
    op.create_table('contests',
    sa.Column('tasks', postgresql.ARRAY(postgresql.UUID(as_uuid=1)), nullable=True),
    sa.Column('forGroups', postgresql.ARRAY(postgresql.UUID(as_uuid=1)), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('authorId', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('deadline', sa.DateTime(), nullable=True),
    sa.Column('forLearningClass', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['authorId'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_contests_uuid'), 'contests', ['uuid'], unique=True)
    op.create_table('notifications',
    sa.Column('toUser', postgresql.UUID(as_uuid=1), nullable=True),
    sa.Column('data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('type', sa.Integer(), nullable=False),
    sa.Column('viewed', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['toUser'], ['users.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_notifications_uuid'), 'notifications', ['uuid'], unique=True)
    op.create_table('tasks',
    sa.Column('tests', sa.JSON(), nullable=True),
    sa.Column('types', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('authorId', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('timeLimit', sa.Integer(), nullable=False),
    sa.Column('memoryLimit', sa.Integer(), nullable=False),
    sa.Column('dayChallenge', sa.Boolean(), nullable=False),
    sa.Column('functionName', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['authorId'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_tasks_uuid'), 'tasks', ['uuid'], unique=True)
    op.create_table('submits',
    sa.Column('userId', postgresql.UUID(as_uuid=1), nullable=True),
    sa.Column('testsResults', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('taskId', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('source', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('referedContest', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('gitCommitId', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('solved', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['taskId'], ['tasks.uuid'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_submits_uuid'), 'submits', ['uuid'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_submits_uuid'), table_name='submits')
    op.drop_table('submits')
    op.drop_index(op.f('ix_tasks_uuid'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_notifications_uuid'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_contests_uuid'), table_name='contests')
    op.drop_table('contests')
    op.drop_index(op.f('ix_achievements_uuid'), table_name='achievements')
    op.drop_table('achievements')
    op.drop_index(op.f('ix_users_uuid'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_system_notifications_uuid'), table_name='system_notifications')
    op.drop_table('system_notifications')
    op.drop_index(op.f('ix_groups_uuid'), table_name='groups')
    op.drop_table('groups')
    # ### end Alembic commands ###